function exportFloat(target, tooltip) {
  option = {
    middleware: [
      window.FloatingUIDOM.shift(),
      window.FloatingUIDOM.offset(10),
      window.FloatingUIDOM.flip(),
    ],
    placement: "bottom-start",
  };


  window.FloatingUIDOM.computePosition(target, tooltip, option).then(
    ({ x, y }) => {
      Object.assign(tooltip.style, {
        position: "absolute",
        top: `${y}px`,
        left: `${x}px`,
        visibility: "hidden",
        zIndex: 100,
      });
    }
  );

  target.addEventListener("mouseenter", () => {
    tooltip.classList.add("!tw-visible");
  });
  target.addEventListener("mouseleave", () => {
    tooltip.classList.remove("!tw-visible");
  });
}

function createPasswordFloat({
  button,
  tooltip,
  closeEl,
  submitEl,
  submitCallback,
  option,
  elRoot,
  excelPasswordElementType,
}) {
  option = {
    middleware: [
      window.FloatingUIDOM.shift(),
      window.FloatingUIDOM.offset(10),
      window.FloatingUIDOM.flip(),
    ],
    placement: "bottom-start",
    ...option,
  };

  window.FloatingUIDOM.computePosition(button, tooltip, option).then(
    ({ x, y }) => {
      Object.assign(tooltip.style, {
        position: "absolute",
        top: `${y}px`,
        left: `${x}px`,
        visibility: "hidden",
        zIndex: 2,
      });
    }
  );

  button.addEventListener("click", () => {
	  //input 값 초기화
	  excelPassword.elInput.value = '';
	  // @ts-ignore
	  excelPasswordConfirm.elInput.value = '';
    tooltip.classList.add("!tw-visible");
  });

  if (!Array.isArray(closeEl)) closeEl = [closeEl];
  closeEl.forEach((el) => {
    el.addEventListener("click", () => {
      tooltip.classList.remove("!tw-visible");
    });
  });

  const { excelPassword, excelPasswordConfirm } = excelPasswordElement(
    { elRoot, submitEl, type: excelPasswordElementType || '' },
    true
  );

  submitEl.addEventListener("click", () =>
    submitCallback({
      elExcelPassword: excelPassword.elInput,
      elExcelPasswordConfirm: excelPasswordConfirm.elInput,
    })
  );
}

function PasswordFloat({
  button,
  tooltip,
  closeEl,
  submitEl,
  submitCallback,
  option,
  elRoot,
  excelPasswordElementType,
}) {
  option = {
    middleware: [
      FloatingUIDOM.shift(),
      FloatingUIDOM.offset(10),
      FloatingUIDOM.flip(),
    ],
    ...option,
  };

  FloatingUIDOM.computePosition(button, tooltip, option).then(({ x, y }) => {
    Object.assign(tooltip.style, {
      position: "absolute",
      top: option.t,
      left: option.l,
      right: option.r,
      bottom: option.b,
      visibility: "hidden",
      zIndex: 2,
    });
  });

  button.addEventListener("click", () => {
    //열려있는 비밀번호 다이얼로그 닫기
    document.querySelectorAll('#_excel_list_body form[id*="tooltip-"]').forEach((obj,v)=>{
      obj.classList.remove("!tw-visible");
    })

    //input 값 초기화
    tooltip.querySelector('input[id*="reasons"]').value = '';
    excelPassword.elInput.value = '';
    tooltip.classList.add("!tw-visible");
  });

  if (!Array.isArray(closeEl)) closeEl = [closeEl];
  closeEl.forEach((el) => {
    el.addEventListener("click", () => {
      tooltip.classList.remove("!tw-visible");
    });
  });

  const { excelPassword } = excelPasswordElement({ elRoot, submitEl, type: excelPasswordElementType || '' });

  submitEl.addEventListener("click", () =>
    submitCallback({
      elExcelPassword: excelPassword.elInput,
    })
  );
}

function loadExcelListPassword() {
  /**
   * arguments[0] Object
   * listApi
   */
  const downloadSubmitCallback = arguments[0];

  /**
   * target Element | Array<Element>
   */
  return function (target, type) {
    function _active(download) {
      const button = download.querySelector("._button");
      const tooltip = download.querySelector("._tooltip");
      const close = download.querySelector('[id*="close"]');
      const cancel = download.querySelector('[id*="cancel"]');
      const request = download.querySelector('[id*="request"]');
      const password = download.querySelector('input[type="password"]');
      const idx = download.querySelector('input[id*="idx"]');
      const reasons = download.querySelector('input[id*="reasons"]');
      const type = download.querySelector('[id*="tooltip"]').dataset.type;

      PasswordFloat({
        button,
        tooltip,
        closeEl: [close, cancel],
        option: {
          placement: "left-start",
        },
        elRoot: download,
        submitEl: request,
        submitCallback: () => {
			//사유가 공백인경우 placeholder 값으로 대체
			reasons.value = reasons.value.trim();
          downloadSubmitCallback && downloadSubmitCallback({
            el: {
              button,
              tooltip,
              close,
              cancel,
              request,
              password,
              idx,
              reasons,
            },
          });
        },
        excelPasswordElementType: type
      });
    }

    if (!target)
      throw `loadExcelListPassword를 검색하세요 여기에 문제가있습니다.`;
    Array.isArray(target) ? _.forEach(target, _active) : _active(target);
  };
}

class ExcelPassword extends PasswordBase {
  constructor(args) {
    super(args);
    this.elInfo = this.base.querySelector("#info");
  }
  checkValidation() {
    const targetValue = this.elInput.value;

    const _result = {
      isPasswordLength: /^.{8,20}$/g.test(this.elInput.value),
      isTextCase:
        /[A-Z]/g.test(targetValue) &&
        /[a-z]/g.test(targetValue) &&
        !/[^a-zA-Z~\.!@#$%^&*()\_\-+=\[\]{}\|\\;:\'\"<>\,\.\?\/0-9]/g.test(
          targetValue
        ),
      isNumber: /[0-9]/g.test(targetValue),
      isSpecialChar: /[~\.!@#$%^&*()\_\-+=\[\]{}\|\\;:\'\"<>\,\.\?\/]/g.test(
        targetValue
      ),
      result:
        !/[^a-zA-Z~\.!@#$%^&*()\_\-+=\[\]{}\|\\;:\'\"<>\,\.\?\/0-9]/g.test(
          targetValue
        ),
    };

    
    // 특수문자,숫자,영문대문자,영문소문자 조합해야하며 8자리~20자리만 허용
    const r8 = /^.{8,20}$/g;
    const test = (r) => r.test(targetValue);
   if(_result.result && _result.isTextCase && _result.isNumber && _result.isSpecialChar && test(r8)) {
      _result.result = true;
    } else {
      _result.result = false;
    }

    this.error = !_result.result;
    return _result.result;
  }
  // box
  #validationBoxError = ["tw-border-danger-500", "tw-text-danger-500"];
  #validationBoxDefault = ["tw-border-[#d3d3d3]"];
  #validationBoxFocus = ["tw-border-primary-500", "!tw-border-b-[2px]"];
  // info
  #validationInfoError = ["tw-text-danger-500"];
  #validationInfoDefault = ["tw-hidden"];
  #validationInfoFocus = ["tw-text-primary-500"];
  focusInStyle() {
    this.elInputBox.classList.remove(
      ...[...this.#validationBoxDefault, ...this.#validationBoxError]
    );
    this.elInputBox.classList.add(...this.#validationBoxFocus);
    this.elInfo.classList.remove(
      ...[...this.#validationInfoDefault, ...this.#validationInfoError]
    );
    this.elInfo.classList.add(...this.#validationInfoFocus);
  }
  focusOutStyle() {
    this.elInputBox.classList.remove(
      ...[...this.#validationBoxFocus, ...this.#validationBoxError]
    );
    this.elInputBox.classList.add(...this.#validationBoxDefault);

    this.elInfo.classList.remove(
      ...[...this.#validationInfoFocus, ...this.#validationInfoError]
    );
    this.elInfo.classList.add(...this.#validationInfoDefault);
  }
  showError() {
    this.elInputBox.classList.remove(
      ...[...this.#validationBoxFocus, ...this.#validationBoxDefault]
    );
    this.elInputBox.classList.add(...this.#validationBoxError);

    this.elInfo.classList.remove(
      ...[...this.#validationInfoFocus, ...this.#validationInfoDefault]
    );
    this.elInfo.classList.add(...this.#validationInfoError);
  }
  hideError() {
    this.elInputBox.classList.remove(
      ...[...this.#validationBoxError, ...this.#validationBoxFocus]
    );
    this.elInputBox.classList.add(...this.#validationBoxDefault);

    this.elInfo.classList.remove(
      ...[...this.#validationInfoError, ...this.#validationInfoFocus]
    );
    this.elInfo.classList.add(...this.#validationInfoDefault);
  }
}

class ExcelPasswordConfirm extends PasswordConfirm {
  constructor(args) {
    super(args);
  }
  #validationError = ["tw-border-danger-500", "tw-text-danger-500"];
  #validationDefault = ["tw-border-[#d3d3d3]"];
  #validationFocus = ["tw-border-primary-500", "!tw-border-b-[2px]"];
  reload() {
    super.reload();
    this.checkValidation() ? this.hideError() : this.showError();
  }
  focusInStyle() {
    this.elInputBox.classList.remove(
      ...[...this.#validationDefault, ...this.#validationError]
    );
    this.elInputBox.classList.add(...this.#validationFocus);
  }
  focusOutStyle() {
    this.elInputBox.classList.remove(
      ...[...this.#validationFocus, ...this.#validationError]
    );
    this.elInputBox.classList.add(...this.#validationDefault);
  }
  showError() {
    this.elInputBox.classList.remove(
      ...[...this.#validationFocus, ...this.#validationDefault]
    );
    this.elInputBox.classList.add(...this.#validationError);
  }
  hideError() {
    this.elInputBox.classList.remove(
      ...[...this.#validationError, ...this.#validationFocus]
    );
    this.elInputBox.classList.add(...this.#validationDefault);
  }
}

/**
 *
 * @param {*} param0
 * @param {*} confirm
 * @returns { excelPassword, excelPasswordConfirm }
 */
function excelPasswordElement({ elRoot, submitEl, type }, confirm = false) {
  // password validation
  const excelPassword = new ExcelPassword({
    elRoot,
    type,
  });
  excelPassword.init();

  let excelPasswordConfirm;
  if (confirm) {
    excelPasswordConfirm = new ExcelPasswordConfirm({
      elRoot,
      type: `confirm_${type}`,
      errorMessage: {
        default: "비밀번호가 일치하지 않습니다. 다시 입력해주세요",
      },
    });
    excelPasswordConfirm.init();
  }

  const elInputs = [excelPassword.elInput];
  confirm && elInputs.push(excelPasswordConfirm.elInput);

  const _signupSubmit = new SignupSubmit({
    elInputs,
    elSubmit: submitEl,
  });
  _signupSubmit.init();

  const result = {
    excelPassword,
  };
  if (confirm) {
    result["excelPasswordConfirm"] = excelPasswordConfirm;
  }
  return result;
}

// 임시
// excel-form.js width excel-password.js

/**
 *
 * @param {object} i10n
 * @param {string} idx
 * @param {{
 *  getTemplate: (idx) => string
 * }} optionField 사유, 비밀번호 체크 와 같은 필드를 넣어야하는데 어떻게 넣어야할지 잘 모르겠다. 그래서 일단 string으로 받아서 구현한다.
 * @returns HTMLDivElement
 */
function __passwordFormElement(i10n, { idx, optionField }) {
  const {
    설명_비밀번호를입력해주세요 = "비밀번호를 입력해주세요",
    설명_비밀번호 = "비밀번호",
    설명_파일생성암호입력 = "파일 생성 암호입력",
    설명_820자영문대소문자숫자특수문자를모두사용해주세요 = "8~20자 영문 대 소문자, 숫자, 특수문자를 모두 사용해주세요.",
    설명_취소 = "취소",
    설명_확인 = "확인",
  } = i10n;

  const parentElement = document.createElement("div");
  parentElement.classList.add("tw-relative");
  const template = `
    <form id="tooltip-${idx}"
      class="_tooltip tw-shadow-[0px_5px_30px_rgba(0,0,0,0.1)] tw-rounded-[2px] tw-max-w-[460px] tw-w-[480px] tw-bg-white" novalidate>
      <input type="text" id="idx-${idx}" hidden readonly value="<?= $request_excel_file_data->idx ?>">
      <div class="tw-flex tw-justify-between tw-items-center">
        <div class="tw-p-[20px]">${설명_파일생성암호입력}</div>
        <button type="button" class="tw-p-[20px] tw-bg-transparent" id="close-${idx}">
          <i class="btm bt-times"></i>
        </button>
      </div>
      <div class="tw-px-[20px] tw-py-[12px] tw-grid tw-gap-y-[20px] tw-pb-[34px]">
        <div class="_msg_box tw-grid tw-gap-[8px]" id="msg_box_${idx}">
          <label class="tw-m-0" for="txt_${idx}">
              <div class="tw-text-[13px] tw-text-[#7F8A98]">${설명_비밀번호}</div>
          </label>
          <div class="tw-flex tw-gap-[18px] tw-border-b tw-border-solid tw-border-[#d3d3d3]" id="inputBox-pass-${idx}">
            <input
              type="password"
              class="tw-h-[28px] tw-w-[100%] tw-border-none tw-py-[6px] tw-text-[13px] tw-leading-[1.43] tw-text-[#3B4859] tw-outline-none tw-outline-1 placeholder:tw-text-[#3B4859] placeholder:tw-text-opacity-40"
              placeholder="${설명_비밀번호를입력해주세요}"
              autocomplete="off"
              autocapitalize="off"
              autocorrect="off"
              required
              id="txt_${idx}"
              name="password"
              password
            />
          </div>
          <div class="tw-relative" id="msg_wrap_${idx}">
            <div id="info" class="tw-mt-[-1px] tw-flex tw-h-[calc(100%+2px)] tw-w-full tw-items-center tw-overflow-hidden tw-bg-white tw-text-[12px] tw-text-primary-500 tw-transition-opacity" >
              ${설명_820자영문대소문자숫자특수문자를모두사용해주세요}
            </div>
            <div class="tw-mt-[-1px] tw-hidden tw-text-[12px] tw-text-danger-600" id="error_msg_${idx}"></div>
            <div id="success_msg_${idx}" class="tw-mt-[-1px] tw-flex tw-h-[calc(100%+2px)] tw-max-h-0 tw-w-full tw-items-center tw-overflow-hidden tw-bg-white tw-text-[12px] tw-text-primary-500 tw-opacity-0 tw-transition-opacity" ></div>
          </div>
        </div>
        ${Array.isArray(optionField) ? "" : optionField(idx)}
      </div>
      <div class="tw-pb-[24px] tw-px-[24px] tw-flex tw-justify-end tw-gap-x-[40px]">
        <button type="button" id="cancel-${idx}" class="tw-bg-transparent tw-p-0">${설명_취소}</button>
        <button type="button" id="request-${idx}" class="tw-bg-transparent tw-p-0 tw-text-primary-500">${설명_확인}</button>
      </div>
    </form>
  `;
  parentElement.innerHTML = template;

  return parentElement;
}

/**
 *
 * @param {Object} i10n
 * @param {Object} param1
 * @returns HTMLButtonElement
 */
function __downloadBtnElement(
  i10n,
  { status: { isComplete = undefined, percent }, expire_time, idx }
) {
  const { 설명_생성중, 버튼_다운로드, 버튼_다운로드불가 } = i10n;
  let className = [];
  let text = "";

  /**
   * TODO: @가을 @상현
   * 통계쪽 작업은 파일을 나눠서하기때문에 진행중인 ui가 생성될 수 있어서 통계족 작업이 완료되면 진행
   * 2022-10-31
   */
  if (isComplete == "N") {
    className = [];
    className.push("make_progress");
    text = 설명_생성중 + percent;
  }

  // 다운로드 가능
  if (isComplete && new Date(expire_time) > new Date()) {
    className = [];
    className.push("text-primary", "make_complete");
    text = 버튼_다운로드;
  }

  // 다운로드 불가능
  let isDownload = false;
  if (isComplete && new Date(expire_time) < new Date()) {
    className = [];
    className.push("text-danger");
    text = 버튼_다운로드불가;
    isDownload = true;
  }

  const element = document.createElement("button");
  // 의도하지 않은 form 액션 방지하기
  element.setAttribute("type", "button");
  // 다운로드 버튼의 id값 추가하기
  element.setAttribute("id", `button-${idx}`);
  // 상태값에 따른 class이름 추가
  element.setAttribute("class", `text-right _button ${className.join(" ")}`);
  // 다운로드 불가능할때 인식할 수 있는 html 속성 추가
  element.setAttribute("data-is-download", isDownload);
  // 다운로드 라벨 텍스트 추가
  element.innerHTML = text;
  return element;
}

/**
 *
 * @param {*} i10n 로컬라이즈 값들을 받아오는 `__`로 시작하는 함수는 i10n을 받아야한다.
 * @param {*} download __downloadBtnElement 필요한 arguments alias
 * @param {{
 *  idx: Unique
 *  optionField: () => string | [() => string]
 * }} password idx __passwordFormElement 필요한 arguments alias
 * @param {*} option password tooltip에 대한 FloatingUI 라이브러리 옵션
 * @returns HTMLDivElement Password & Download
 */
function __passwordDownloadBtnElement(
  i10n,
  download,
  password,
  option,
  downloadCallback,
) {
  /**
   * download 버튼 element 추가
   */
  const downloadAction = __(__downloadBtnElement, i10n);
  const downloadElement = downloadAction(download);

  /**
   * password
   * TODO:1 지금은 optionField를 임의적으로 넣고있다. 이 것을 생성하는 쪽에서 기본적으로 몇가지 옵션 필드를 만들어 놓고 선택해서 렌더링할 수 있게 변경하자.
   * TODO:2 그리고 사용자쪽에서 받아온 옵션 필드도 넣을 수 있도록 해야한다.
   * @author 한상현
   */
  const {
    설명_사유 = "사유",
    설명_예 = "예",
    설명_회원관리 = "회원관리",
  } = i10n;
  const optionField = (idx) => {
    return `
      <div class="_msg_box tw-grid tw-gap-[8px]" id="msg_box_confirm_${idx}">
        <label class="tw-m-0" for="reasons-${idx}">
          <div class="tw-text-[13px] tw-text-[#7F8A98]">${설명_사유}</div>
        </label>
        <div class="tw-flex tw-gap-[18px] tw-border-b tw-border-solid tw-border-[#d3d3d3]" id="inputBox-${idx}">
          <input
            type="text"
            class="tw-h-[28px] tw-w-[100%] tw-border-none tw-py-[6px] tw-text-[13px] tw-leading-[1.43] tw-text-[#3B4859] tw-outline-none tw-outline-1 placeholder:tw-text-[#3B4859] placeholder:tw-text-opacity-40"
            placeholder="(${설명_예}: ${설명_회원관리})"
            autocomplete="off"
            autocapitalize="off"
            autocorrect="off"
            required
            id="reasons-${idx}"
          />
        </div>
      </div>
    `;
  };

  password.optionField = optionField;
  const passwordFormAction = __(__passwordFormElement, i10n);
  const passwordFormElement = passwordFormAction(password);
  const parentElement = document.createElement("div");

  // 다운로드 불가인 상태에서 패드워드와 결합하는 함수 실행하지 않기
  if (downloadElement.dataset.isDownload === "true") {
    downloadElement.setAttribute("disabled", "");
    parentElement.appendChild(downloadElement);
    return parentElement;
  }

  parentElement.appendChild(passwordFormElement);
  parentElement.appendChild(downloadElement);

  const button = parentElement.querySelector("[id*=button]");
  const tooltip = parentElement.querySelector("[id*=tooltip]");
  const close = parentElement.querySelector("[id*=close]");
  const cancel = parentElement.querySelector("[id*=cancel]");
  const request = parentElement.querySelector("[id*=request]");
  /**
   * option
   * 생성하는 쪽에서 받아오게 변경해야한다.
   * TODO:1 연계 제거되어야할 로직
   * @author 한상현
   */
  const reasons = parentElement.querySelector("[id*=reasons]");

  PasswordFloat({
    button,
    tooltip,
    closeEl: [close, cancel],
    option,
    elRoot: parentElement,
    submitEl: request,
    submitCallback: (el) => {
      /**
       * TODO:1 연계 제거되어야할 로직
       * @author 한상현
       */
      if (reasons) {
        el["elReasons"] = reasons;
      }
      downloadCallback(password.idx, el);
    },
    excelPasswordElementType: password.idx
  });

  return parentElement;
}

/**
 * @param {object} item
 * @param {object} i10n
 */
function __excelListElement(i10n, itemData, rowData, type) {
  const {
    idx,
    file_name,
    request_time,
    expire_time,
    member_name,
    status,
    deleteCallback,
    downloadCallback,
  } = itemData;
  const {
    isFirst,
    isLast,
    tooltipOption = {
      t: "0",
      r: "calc(100% + 8px)",
    },
  } = rowData;
  const { 설명_진행중, 설명_완료, 버튼_삭제 } = i10n;

  function statusValue() {
    let result = 설명_진행중;
    new Date(expire_time) > new Date(request_time)
      ? (result = 설명_완료)
      : (result = 설명_진행중);
    return result;
  }

  // 패스워드 & 버튼 결합된 돔 가져오기 (create)
  const passwordDownloadBtnElement = __(__passwordDownloadBtnElement, i10n)(
    { status, expire_time },
    { idx },
    tooltipOption,
    downloadCallback
  );

  const template = `
    <input type="hidden" name="excel_status" class="excel_status tw-hidden" value="${statusValue()}"/>
    <td class="tw-whitespace-nowrap tw-border-y tw-border-[#E5E6E6] ${
      isFirst ? "tw-border-t-0" : ""
    } ${isLast ? "tw-border-b-0" : ""} tw-pl-[16px]">
      <div class="tw-px-[9px] tw-py-[10px]">
        ${file_name}
      </div>
    </td>
    <td class="tw-whitespace-nowrap tw-border-y tw-border-[#E5E6E6] ${
      isFirst ? "tw-border-t-0" : ""
    } ${isLast ? "tw-border-b-0" : ""}">
      <div class="tw-px-[9px] tw-py-[10px]">
        ${moment(request_time).format("YYYY.MM.DD hh:mm")}
      </div>
    </td>
    <td class="tw-whitespace-nowrap tw-border-y tw-border-[#E5E6E6] ${
      isFirst ? "tw-border-t-0" : ""
    } ${isLast ? "tw-border-b-0" : ""}">
      <div class="tw-px-[9px] tw-py-[10px]">
        ${moment(expire_time).format("YYYY.MM.DD hh:mm") || "-"}
      </div>
    </td>
    <td class="tw-whitespace-nowrap tw-border-y tw-border-[#E5E6E6] ${
      isFirst ? "tw-border-t-0" : ""
    } ${isLast ? "tw-border-b-0" : ""}">
      <div class="tw-px-[9px] tw-py-[10px]">
        ${member_name}
      </div>
    </td>
    <td class="tw-whitespace-nowrap tw-border-y tw-border-[#E5E6E6] ${
      isFirst ? "tw-border-t-0" : ""
    } ${isLast ? "tw-border-b-0" : ""}">
      <div class="tw-px-[9px] tw-py-[10px] _download">
      </div>
    </td>
    <td class="tw-whitespace-nowrap tw-border-y tw-border-[#E5E6E6] ${
      isFirst ? "tw-border-t-0" : ""
    } ${isLast ? "tw-border-b-0" : ""} tw-pr-[16px]">
      <div class="tw-px-[9px] tw-py-[10px]">
        <span class="text-danger _delete" style="cursor: pointer;">
          ${버튼_삭제}
        </span>
      </div>
    </td>
  `;
  const root = document.createElement("tr");
  root.classList.add("tw-relative");
  root.id = `_excelList-${itemData.idx}`;
  root.innerHTML = template;

  // deleteCallback
  root
    .querySelector("._delete")
    .addEventListener("click", () => deleteCallback(itemData.idx));
  root.querySelector("._download").appendChild(passwordDownloadBtnElement);
  return root;
}

function __emptyExcelElement(i10n) {
  const { 설명_요청된데이터가없습니다 } = i10n;
  const template = `
    <td colspan="6" class="tw-whitespace-nowrap tw-px-[16px] tw-h-[40px]">
      <div class="tw-flex tw-justify-center tw-items-center">
        ${설명_요청된데이터가없습니다}
      </div>
    </td>
  `;
  const root = document.createElement("tr");
  root.classList.add("tw-relative");
  root.innerHTML = template;

  return root;
}

function __excelTableElement(i10n, { deleteCallback, downloadCallback, res }) {
  const { 설명_생성일, 설명_파일명, 버튼_다운로드, 설명_만료일, 설명_삭제 } =
    i10n;
  const table = document.createElement("table");
  table.classList.add("tw-border-collapse", "tw-min-w-full");

  const excelListElement = __(__excelListElement, i10n);
  const emptyExcelElement = __(__emptyExcelElement, i10n);

  const template = `
      <thead>
          <tr>
              <td class="tw-pl-[16px] tw-border-b tw-border-[#E5E6E6]">
                  <div class="tw-px-[9px] tw-py-[10px]">
                      ${설명_파일명}
                  </div>
              </td>
              <td class="tw-border-b tw-border-[#E5E6E6]">
                  <div class="tw-px-[9px] tw-py-[10px]">
                      ${설명_생성일}
                  </div>
              </td>
              <td class="tw-border-b tw-border-[#E5E6E6]">
                  <div class="tw-px-[9px] tw-py-[10px]">
                      ${설명_만료일}
                  </div>
              </td>
              <td class="tw-border-b tw-border-[#E5E6E6]">
                  <div class="tw-px-[9px] tw-py-[10px]">
                      생성인
                  </div>
              </td>
              <td class="tw-border-b tw-border-[#E5E6E6]">
                  <div class="tw-px-[9px] tw-py-[10px]">
                      ${버튼_다운로드}
                  </div>
              </td>
              <td class="tw-pr-[16px] tw-border-b tw-border-[#E5E6E6]">
                  <div class="tw-px-[9px] tw-py-[10px]">
                      ${설명_삭제}
                  </div>
              </td>
          </tr>
      </thead>
      <tbody class="_listBody"></tbody>
  `;
  table.innerHTML = template;
  const listBody = table.querySelector("._listBody");

  // 리스트 없을 때
  if (res.length === 0 || res.msg === 'FAILED') {
    listBody.appendChild(emptyExcelElement());

    // 리스트가 없을때 해당 attribute로 리스트의 루트에서 해당 값을 가져다 사용할 의도로 추가
    listBody.setAttribute('data-content', 'none');
    return table;
  }
  // 리스트 추가
  for (const [index, item] of res.data.entries()) {
    item.deleteCallback = deleteCallback;
    item.downloadCallback = downloadCallback;
    const rowData = {
      isFirst: index === 0,
      isLast: index === res.data.length - 1 && res.data.length - 1 > 8,
    };
    if (res.data.length - 1 > 8 && index > res.data.length - 1 - 8) {
      rowData["tooltipOption"] = {
        b: "0",
        r: "calc(100% + 8px)",
      };
    }
    listBody.appendChild(excelListElement(item, rowData));
  }

  return table;
}
